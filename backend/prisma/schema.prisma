generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String     @id @default(uuid())
  name     String
  email    String     @unique
  password String
  UserRole UserRole[]

  @@map("users")
}

model Role {
  id       String     @id @default(uuid())
  name     String     @unique
  UserRole UserRole[]

  @@map("roles")
}

model UserRole {
  user   User   @relation(fields: [userId], references: [id])
  role   Role   @relation(fields: [roleId], references: [id])
  userId String @map("user_id")
  roleId String @map("role_id")

  @@id([userId, roleId])
  @@map("user_roles")
}

model Customer {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  cpf       String     @unique
  phone     String     @unique
  purchases Purchase[]
  payments  Payment[]

  @@map("customers")
}

model Purchase {
  id          String   @id @default(uuid())
  title       String
  description String?
  date        DateTime @default(now())
  value       Float
  Customer    Customer @relation(fields: [customerId], references: [id])
  customerId  String   @map("customer_id")

  @@map("purchases")
}

model Payment {
  id            String   @id @default(uuid())
  mercadoPagoId String   @unique @map("mercado_pago_id")
  status        String   @default("pending")
  value         Float
  copyPasteCode String   @map("copy_paste_code")
  qrCode        String   @map("qr_code")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  Customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String   @map("customer_id")

  @@map("payments")
}
